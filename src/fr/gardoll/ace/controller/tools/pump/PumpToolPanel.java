package fr.gardoll.ace.controller.tools.pump ;

import java.awt.event.AdjustmentEvent ;
import java.awt.event.AdjustmentListener ;
import java.util.SortedSet ;
import java.util.TreeSet ;

import javax.swing.SpinnerNumberModel ;
import javax.swing.text.DefaultCaret ;

import org.apache.logging.log4j.Logger ;

import fr.gardoll.ace.controller.core.ControlPanel ;
import fr.gardoll.ace.controller.core.Log ;
import fr.gardoll.ace.controller.ui.AbstractPausableJPanelObserver ;

public class PumpToolPanel extends AbstractPausableJPanelObserver
    implements ControlPanel
{
  private static final long serialVersionUID = -9036601240167321318L ;

  private static final Logger _LOG = Log.HIGH_LEVEL;

  private static final int DEFAULT_VOL_VALUE = 0 ;
  private static final int DEFAULT_MIN_VOL = 0 ;
  private static final int DEFAULT_MAX_VOL = 10 ;
  private static final int DEFAULT_VOL_STEP = 1 ;

  private final PumpToolControl _ctrl ;

  private javax.swing.text.DefaultCaret caret ;
  private javax.swing.BoundedRangeModel model ;

  /**
   * Creates new form PumpToolPanel
   */
  public PumpToolPanel(PumpToolControl ctrl)
  {
    super(ctrl) ;
    this._ctrl = ctrl ;
    initComponents() ;
    initCustom() ;
  }

  private void initCustom()
  {
    SpinnerNumberModel model = new SpinnerNumberModel(DEFAULT_VOL_VALUE,
        DEFAULT_MIN_VOL, DEFAULT_MAX_VOL, DEFAULT_VOL_STEP) ;
    this.volumeSpinner.setModel(model) ;

    setupSmartScrolling() ;
  }

  private void setupSmartScrolling()
  {
    caret = (javax.swing.text.DefaultCaret) this.logTextArea.getCaret() ;

    javax.swing.JScrollBar scrollBar = this.logTextScrollPane
        .getVerticalScrollBar() ;
    model = scrollBar.getModel() ;
    scrollBar.addAdjustmentListener(new AdjustmentListener()
    {
      @Override
      public void adjustmentValueChanged(AdjustmentEvent e)
      {
        if (model.getValue() == model.getMaximum() - model.getExtent())
        {
          caret.setDot(logTextArea.getText().length()) ;
          caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE) ;
        }
        else
        {
          caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE) ;
        }
      }
    }) ;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents()
  {
    java.awt.GridBagConstraints gridBagConstraints ;

    controlPanel = new javax.swing.JPanel() ;
    volumePanel = new javax.swing.JPanel() ;
    volumeSpinner = new javax.swing.JSpinner() ;
    linesPanel = new javax.swing.JPanel() ;
    line1CheckBox = new javax.swing.JCheckBox() ;
    line2CheckBox = new javax.swing.JCheckBox() ;
    line3CheckBox = new javax.swing.JCheckBox() ;
    line4CheckBox = new javax.swing.JCheckBox() ;
    line5CheckBox = new javax.swing.JCheckBox() ;
    line6CheckBox = new javax.swing.JCheckBox() ;
    logPanel = new javax.swing.JPanel() ;
    logTextScrollPane = new javax.swing.JScrollPane() ;
    logTextArea = new javax.swing.JTextArea() ;
    buttonPanel = new javax.swing.JPanel() ;
    startCancelButton = new javax.swing.JButton() ;
    pauseToggleButton = new javax.swing.JToggleButton() ;
    closeButton = new javax.swing.JButton() ;
    buttonFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0),
        new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0)) ;

    setPreferredSize(new java.awt.Dimension(780, 460)) ;
    setLayout(new java.awt.GridBagLayout()) ;

    controlPanel.setLayout(new java.awt.GridBagLayout()) ;

    volumePanel.setBorder(
        javax.swing.BorderFactory.createTitledBorder("Volume in mL")) ;
    volumePanel.setLayout(new java.awt.GridBagLayout()) ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    volumePanel.add(volumeSpinner, gridBagConstraints) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    controlPanel.add(volumePanel, gridBagConstraints) ;

    linesPanel
        .setBorder(javax.swing.BorderFactory.createTitledBorder("Lines")) ;
    linesPanel.setLayout(new java.awt.GridBagLayout()) ;

    line1CheckBox.setText("Line 1") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line1CheckBox, gridBagConstraints) ;

    line2CheckBox.setText("Line 2") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 1 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line2CheckBox, gridBagConstraints) ;

    line3CheckBox.setText("Line 3") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line3CheckBox, gridBagConstraints) ;

    line4CheckBox.setText("Line 4") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 1 ;
    gridBagConstraints.gridy = 1 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line4CheckBox, gridBagConstraints) ;

    line5CheckBox.setText("Line 5") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 2 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line5CheckBox, gridBagConstraints) ;

    line6CheckBox.setText("Line 6") ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 2 ;
    gridBagConstraints.gridy = 1 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    linesPanel.add(line6CheckBox, gridBagConstraints) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 1 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 0.1 ;
    gridBagConstraints.weighty = 0.1 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    controlPanel.add(linesPanel, gridBagConstraints) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 0.1 ;
    gridBagConstraints.weighty = 0.1 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    add(controlPanel, gridBagConstraints) ;

    logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log")) ;
    logPanel.setLayout(new java.awt.GridBagLayout()) ;

    logTextScrollPane.setHorizontalScrollBarPolicy(
        javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS) ;
    logTextScrollPane.setVerticalScrollBarPolicy(
        javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS) ;

    logTextArea.setEditable(false) ;
    logTextArea.setColumns(20) ;
    logTextArea.setLineWrap(true) ;
    logTextArea.setRows(5) ;
    logTextScrollPane.setViewportView(logTextArea) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.ipadx = 221 ;
    gridBagConstraints.ipady = 61 ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    logPanel.add(logTextScrollPane, gridBagConstraints) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 1 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    add(logPanel, gridBagConstraints) ;

    buttonPanel.setLayout(new java.awt.GridBagLayout()) ;

    startCancelButton.setText("start") ;
    startCancelButton.addActionListener(new java.awt.event.ActionListener()
    {
      @Override
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        startCancelButtonActionPerformed(evt) ;
      }
    }) ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    buttonPanel.add(startCancelButton, gridBagConstraints) ;

    pauseToggleButton.setText("pause") ;
    pauseToggleButton.addActionListener(new java.awt.event.ActionListener()
    {
      @Override
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        pauseToggleButtonActionPerformed(evt) ;
      }
    }) ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 1 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    buttonPanel.add(pauseToggleButton, gridBagConstraints) ;

    closeButton.setText("close") ;
    closeButton.addActionListener(new java.awt.event.ActionListener()
    {
      @Override
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        closeButtonActionPerformed(evt) ;
      }
    }) ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 3 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    buttonPanel.add(closeButton, gridBagConstraints) ;
    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 2 ;
    gridBagConstraints.gridy = 0 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 1.0 ;
    gridBagConstraints.weighty = 1.0 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    buttonPanel.add(buttonFiller, gridBagConstraints) ;

    gridBagConstraints = new java.awt.GridBagConstraints() ;
    gridBagConstraints.gridx = 0 ;
    gridBagConstraints.gridy = 2 ;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH ;
    gridBagConstraints.weightx = 0.1 ;
    gridBagConstraints.weighty = 0.1 ;
    gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2) ;
    add(buttonPanel, gridBagConstraints) ;
  }// </editor-fold>

  private void startCancelButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    if (this._isStartEnable)
    {
      _LOG.debug("**** event start ****") ;

      int volume = 0 ;
      try
      {
        this.volumeSpinner.commitEdit() ;
        volume = (int) this.volumeSpinner.getValue() ;
      }
      catch (Exception e)
      {
        _LOG.error("error while fetching the position spinner value", e) ;
        this.volumeSpinner.setValue(0) ;
        return ;
      }

      SortedSet<Integer> lines = new TreeSet<>() ;

      if (this.line1CheckBox.isSelected())
      {
        lines.add(1) ;
      }

      if (this.line2CheckBox.isSelected())
      {
        lines.add(2) ;
      }

      if (this.line3CheckBox.isSelected())
      {
        lines.add(3) ;
      }

      if (this.line4CheckBox.isSelected())
      {
        lines.add(4) ;
      }

      if (this.line5CheckBox.isSelected())
      {
        lines.add(5) ;
      }

      if (this.line6CheckBox.isSelected())
      {
        lines.add(6) ;
      }

      this._ctrl.start(lines, volume) ;
    }
    else
    {
      _LOG.debug("**** event cancel ****");
      this._ctrl.cancel() ;
    }
  }

  private void pauseToggleButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event pause/resume ****") ;
    this.pauseAndResume() ;
  }

  private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event close ****") ;
    this.close() ;
  }

  // Variables declaration - do not modify
  private javax.swing.Box.Filler buttonFiller ;
  private javax.swing.JPanel buttonPanel ;
  private javax.swing.JButton closeButton ;
  private javax.swing.JPanel controlPanel ;
  private javax.swing.JCheckBox line1CheckBox ;
  private javax.swing.JCheckBox line2CheckBox ;
  private javax.swing.JCheckBox line3CheckBox ;
  private javax.swing.JCheckBox line4CheckBox ;
  private javax.swing.JCheckBox line5CheckBox ;
  private javax.swing.JCheckBox line6CheckBox ;
  private javax.swing.JPanel linesPanel ;
  private javax.swing.JPanel logPanel ;
  private javax.swing.JTextArea logTextArea ;
  private javax.swing.JScrollPane logTextScrollPane ;
  private javax.swing.JToggleButton pauseToggleButton ;
  private javax.swing.JButton startCancelButton ;
  private javax.swing.JPanel volumePanel ;
  private javax.swing.JSpinner volumeSpinner ;
  // End of variables declaration

  @Override
  protected void enablePauseControl(boolean isEnable)
  {
    pauseToggleButton.setEnabled(isEnable || this._isResumeEnable) ;
    pauseToggleButton.setSelected(!isEnable) ;
    if (isEnable)
    {
      pauseToggleButton.setText("pause") ;
    }
    else
    {
      pauseToggleButton.setText("resume") ;
    }
  }

  @Override
  protected void enableResumeControl(boolean isEnable)
  {
    pauseToggleButton.setEnabled(isEnable || this._isPauseEnable) ;
    pauseToggleButton.setSelected(isEnable) ;

    if (isEnable)
    {
      pauseToggleButton.setText("resume") ;
    }
    else
    {
      pauseToggleButton.setText("pause") ;
    }
  }

  @Override
  protected void enableCancelControl(boolean isEnable)
  {
    startCancelButton.setEnabled(isEnable || this._isStartEnable) ;
    if (isEnable)
    {
      startCancelButton.setText("cancel") ;
    }
    else
    {
      startCancelButton.setText("start") ;
    }
  }

  @Override
  protected void enableReinitControl(boolean isEnable)
  {
    // Reinit feature is not implemented, nothing to do.
  }

  @Override
  protected void enableStartControl(boolean isEnable)
  {
    startCancelButton.setEnabled(isEnable || this._isCancelEnable) ;
    if (isEnable)
    {
      startCancelButton.setText("start") ;
    }
    else
    {
      startCancelButton.setText("cancel") ;
    }
  }

  @Override
  public void enableCarouselControl(boolean isEnable)
  {
    // Nothing to do.
  }

  @Override
  protected void displayToUserLogSys(String msg)
  {
    this.logTextArea.append(msg) ;
  }

  @Override
  protected void enableCloseControl(boolean isEnable)
  {
    closeButton.setEnabled(isEnable) ;
  }
}
