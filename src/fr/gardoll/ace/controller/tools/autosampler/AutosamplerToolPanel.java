package fr.gardoll.ace.controller.tools.autosampler ;

import java.awt.event.AdjustmentEvent ;
import java.awt.event.AdjustmentListener ;
import java.io.File ;

import javax.swing.JFileChooser ;
import javax.swing.filechooser.FileFilter ;
import javax.swing.text.DefaultCaret ;

import org.apache.logging.log4j.LogManager ;
import org.apache.logging.log4j.Logger ;

import fr.gardoll.ace.controller.column.Colonne ;
import fr.gardoll.ace.controller.core.ControlPanel ;
import fr.gardoll.ace.controller.core.Utils ;
import fr.gardoll.ace.controller.settings.Names ;
import fr.gardoll.ace.controller.ui.AbstractPausableJPanelObserver ;

public class AutosamplerToolPanel extends AbstractPausableJPanelObserver
    implements ControlPanel
{
  private static final long serialVersionUID = -3286878572452437372L ;
  
  private static final Logger _LOG = LogManager.getLogger(AutosamplerToolPanel.class.getName());

  private final AutosamplerToolControl _ctrl ;
  
  private javax.swing.text.DefaultCaret caret;
  private javax.swing.BoundedRangeModel model;

  /**
   * Creates new form AutosamplerToolPanel
   */
  public AutosamplerToolPanel(AutosamplerToolControl ctrl)
  {
    super(ctrl);
    this._ctrl = ctrl;
    initComponents() ;
    initCustom();
  }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        manualPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        positionPanel = new javax.swing.JPanel();
        positionSpinner = new javax.swing.JSpinner();
        positionButton = new javax.swing.JButton();
        arrowPanel = new javax.swing.JPanel();
        leftButton = new javax.swing.JButton();
        rightButton = new javax.swing.JButton();
        freePositionPanel = new javax.swing.JPanel();
        freePositionSpinner = new javax.swing.JSpinner();
        freePositionButton = new javax.swing.JButton();
        refPositionPanel = new javax.swing.JPanel();
        toTopStopButton = new javax.swing.JButton();
        openFileChooserButton = new javax.swing.JButton();
        aboveColumnButton = new javax.swing.JButton();
        toTrashBinButton = new javax.swing.JButton();
        miscPanel = new javax.swing.JPanel();
        manualButton = new javax.swing.JButton();
        vibrationButton = new javax.swing.JButton();
        logPanel = new javax.swing.JPanel();
        logTextScrollPane = new javax.swing.JScrollPane();
        logTextArea = new javax.swing.JTextArea();
        buttonPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        pauseToggleButton = new javax.swing.JToggleButton();
        closeButton = new javax.swing.JButton();
        buttonFiller = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0));

        manualPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Manual setting"));
        manualPanel.setLayout(new java.awt.GridBagLayout());

        setPreferredSize(new java.awt.Dimension(780, 460));
        setLayout(new java.awt.GridBagLayout());

        controlPanel.setLayout(new java.awt.GridBagLayout());

        positionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Carousel position"));
        positionPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        positionPanel.add(positionSpinner, gridBagConstraints);

        positionButton.setText("go");
        positionButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                positionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        positionPanel.add(positionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        controlPanel.add(positionPanel, gridBagConstraints);

        arrowPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Carousel quarter circle"));
        arrowPanel.setLayout(new java.awt.GridBagLayout());

        leftButton.setText("<<");
        leftButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        arrowPanel.add(leftButton, gridBagConstraints);

        rightButton.setText(">>");
        rightButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        arrowPanel.add(rightButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        controlPanel.add(arrowPanel, gridBagConstraints);

        freePositionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Arm free position"));
        freePositionPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        freePositionPanel.add(freePositionSpinner, gridBagConstraints);

        freePositionButton.setText("go");
        freePositionButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                freePositionButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        freePositionPanel.add(freePositionButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        controlPanel.add(freePositionPanel, gridBagConstraints);

        refPositionPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Arm ref position"));
        refPositionPanel.setLayout(new java.awt.GridBagLayout());

        toTopStopButton.setText("go to top");
        toTopStopButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTopStopButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        refPositionPanel.add(toTopStopButton, gridBagConstraints);

        openFileChooserButton.setText("open column");
        openFileChooserButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileChooserButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        refPositionPanel.add(openFileChooserButton, gridBagConstraints);

        aboveColumnButton.setText("go above column");
        aboveColumnButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboveColumnButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        refPositionPanel.add(aboveColumnButton, gridBagConstraints);

        toTrashBinButton.setText("go to trash");
        toTrashBinButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toTrashBinButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        refPositionPanel.add(toTrashBinButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        controlPanel.add(refPositionPanel, gridBagConstraints);

        miscPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Miscellaneous"));
        miscPanel.setLayout(new java.awt.GridBagLayout());

        manualButton.setText("manual carousel");
        manualButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        miscPanel.add(manualButton, gridBagConstraints);

        vibrationButton.setText("arm vibration");
        vibrationButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vibrationButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        miscPanel.add(vibrationButton, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.5;
        gridBagConstraints.weighty = 0.5;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        controlPanel.add(miscPanel, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(controlPanel, gridBagConstraints);

        logPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Log"));
        logPanel.setMinimumSize(new java.awt.Dimension(400, 115));
        logPanel.setPreferredSize(new java.awt.Dimension(400, 191));
        logPanel.setRequestFocusEnabled(false);
        logPanel.setLayout(new java.awt.GridBagLayout());

        logTextScrollPane.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        logTextScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        logTextArea.setEditable(false);
        logTextArea.setColumns(20);
        logTextArea.setLineWrap(true);
        logTextArea.setRows(5);
        logTextScrollPane.setViewportView(logTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 221;
        gridBagConstraints.ipady = 61;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        logPanel.add(logTextScrollPane, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(logPanel, gridBagConstraints);

        buttonPanel.setLayout(new java.awt.GridBagLayout());

        cancelButton.setText("cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_START;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        buttonPanel.add(cancelButton, gridBagConstraints);

        pauseToggleButton.setText("pause");
        pauseToggleButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pauseToggleButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        buttonPanel.add(pauseToggleButton, gridBagConstraints);

        closeButton.setText("close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.LINE_END;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        buttonPanel.add(closeButton, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        buttonPanel.add(buttonFiller, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        gridBagConstraints.insets = new java.awt.Insets(2, 2, 2, 2);
        add(buttonPanel, gridBagConstraints);
    }// </editor-fold>                        

  private void positionButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event go position ****");
    
    Integer position = null;
    try
    {
      this.positionSpinner.commitEdit();
      position = (Integer) this.positionSpinner.getValue();
    }
    catch(Exception e)
    {
      _LOG.error("error while fetching the position spinner value", e);
      this.positionSpinner.setValue(0);
      return;
    }
    
    this._ctrl.carouselGoPosition(position);
  }

  private void leftButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event turn left ****");
    this._ctrl.carouselTurnLeft();
  }

  private void rightButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event turn right ****");
    this._ctrl.carouselTurnRight();
  }

  private void manualButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event manual carousel positioning ****");
    this._ctrl.carouselFreeMove();
  }

  private void freePositionButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event free arm positioning ****");
    Integer position = null;
    try
    {
      this.freePositionSpinner.commitEdit();
      position = (Integer) this.freePositionSpinner.getValue();
    }
    catch(Exception e)
    {
      _LOG.error("error while fetching the position spinner value", e);
      this.freePositionSpinner.setValue(0);
      return;
    }
    
    this._ctrl.armFreeMove(position);
  }

  private void vibrationButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event arm vibration ****");
    this._ctrl.vibrate();
  }

  private void toTopStopButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event go arm to top ****");
    this._ctrl.armGoButee();
  }

  private void openFileChooserButtonActionPerformed(
      java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event column file opening ****");
    int returnValue = fileChooser.showOpenDialog(this);
    if(returnValue == JFileChooser.APPROVE_OPTION)
    {
      File file = fileChooser.getSelectedFile().getAbsoluteFile();
      _LOG.info(String.format("selected column file: '%s'", file));
      this._ctrl.openColumn(file.toPath());
    }
    else
    {
      _LOG.debug("cancel column file openning");
    }
  }

  private void aboveColumnButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event arm go to column ****");
    this._ctrl.armGoColonne();
  }

  private void toTrashBinButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event arm go to trash bin ****");
    this._ctrl.armGoTrash();
  }

  private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event cancel or reinit ****");
    this.cancelAndReinit();
  }

  private void pauseToggleButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event pause/resume ****");
    this.pauseAndResume();
  }

  private void closeButtonActionPerformed(java.awt.event.ActionEvent evt)
  {
    _LOG.debug("**** event close ****");
    this.close();
  }


    // Variables declaration - do not modify                     
    private javax.swing.JButton aboveColumnButton;
    private javax.swing.JPanel arrowPanel;
    private javax.swing.Box.Filler buttonFiller;
    private javax.swing.JPanel buttonPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton closeButton;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JButton freePositionButton;
    private javax.swing.JPanel freePositionPanel;
    private javax.swing.JSpinner freePositionSpinner;
    private javax.swing.JButton leftButton;
    private javax.swing.JPanel logPanel;
    private javax.swing.JTextArea logTextArea;
    private javax.swing.JScrollPane logTextScrollPane;
    private javax.swing.JButton manualButton;
    private javax.swing.JPanel manualPanel;
    private javax.swing.JPanel miscPanel;
    private javax.swing.JButton openFileChooserButton;
    private javax.swing.JToggleButton pauseToggleButton;
    private javax.swing.JButton positionButton;
    private javax.swing.JPanel positionPanel;
    private javax.swing.JSpinner positionSpinner;
    private javax.swing.JPanel refPositionPanel;
    private javax.swing.JButton rightButton;
    private javax.swing.JButton toTopStopButton;
    private javax.swing.JButton toTrashBinButton;
    private javax.swing.JButton vibrationButton;
    // End of variables declaration                   

      private final JFileChooser fileChooser = new JFileChooser();
  
  private void initCustom()
  {
    this.fileChooser.setDialogTitle("select column file");
    this.fileChooser.setCurrentDirectory(Names.COLUMN_DIR_PATH.toFile());
    this.fileChooser.setMultiSelectionEnabled(false);
    this.fileChooser.setFileFilter(new FileFilter() 
    {
      @Override
      public boolean accept(File f)
      {
        if(f.isDirectory())
        {
          return true;
        }
        else
        {
          String fileName = f.getName();
          String file_extention = Utils.getFileExtention(fileName);
          return Colonne.COLUMN_FILE_EXTENTION.equals(file_extention);
        }
      }

      @Override
      public String getDescription()
      {
        return String.format("column file *.%s", Colonne.COLUMN_FILE_EXTENTION);
      }
    });
    
    setupSmartScrolling();
  }
  
  private void setupSmartScrolling()
  {
    caret = (javax.swing.text.DefaultCaret) this.logTextArea.getCaret();
    
    javax.swing.JScrollBar scrollBar = this.logTextScrollPane.getVerticalScrollBar();
    model = scrollBar.getModel();
    scrollBar.addAdjustmentListener(new AdjustmentListener()
    {
      @Override
      public void adjustmentValueChanged(AdjustmentEvent e)
      {
        if (model.getValue() == model.getMaximum() - model.getExtent())
        {
           caret.setDot(logTextArea.getText().length());
           caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);
        }
        else
        {
           caret.setUpdatePolicy(DefaultCaret.NEVER_UPDATE);
        }
      }
    });
  }
  
  @Override
  protected void displayToUserLogSys(String msg)
  {
    this.logTextArea.append(msg);
  }
  
  @Override
  public void enableCloseControl(boolean isEnable)
  {
    closeButton.setEnabled(isEnable);
  }

  @Override
  public void enablePauseControl(boolean isEnable)
  {
    pauseToggleButton.setEnabled(isEnable || AutosamplerToolPanel.this._isResumeEnable);
    pauseToggleButton.setSelected(! isEnable);
    if(isEnable)
    {
      pauseToggleButton.setText("pause");
    }
    else
    {
      pauseToggleButton.setText("resume");
    }
  }

  @Override
  public void enableResumeControl(boolean isEnable)
  {
    pauseToggleButton.setEnabled(isEnable || AutosamplerToolPanel.this._isPauseEnable);
    pauseToggleButton.setSelected(isEnable);
    
    if(isEnable)
    {
      pauseToggleButton.setText("resume");
    }
    else
    {
      pauseToggleButton.setText("pause");
    }
  }

  @Override
  public void enableCancelControl(boolean isEnable)
  {
    cancelButton.setEnabled(isEnable || AutosamplerToolPanel.this._isResumeEnable);
    
    if(isEnable)
    {
      cancelButton.setText("cancel");
    }
    else
    {
      cancelButton.setText("reset");
    }
  }

  @Override
  public void enableReinitControl(boolean isEnable)
  {
    cancelButton.setEnabled(isEnable || AutosamplerToolPanel.this._isCancelEnable);
    
    if(isEnable)
    {
      cancelButton.setText("reset");
    }
    else
    {
      cancelButton.setText("cancel");
    }
  }
  
  @Override
  public void enableCarouselControl(boolean isEnable)
  {  
    // Nothing to do.
  }
  
  @Override
  public void enableStartControl(boolean isEnable)
  {
    aboveColumnButton.setEnabled(isEnable);
    freePositionButton.setEnabled(isEnable);
    leftButton.setEnabled(isEnable);
    manualButton.setEnabled(isEnable);
    openFileChooserButton.setEnabled(isEnable);
    positionButton.setEnabled(isEnable);
    rightButton.setEnabled(isEnable);
    toTopStopButton.setEnabled(isEnable);
    toTrashBinButton.setEnabled(isEnable);
    vibrationButton.setEnabled(isEnable);
  }
}
